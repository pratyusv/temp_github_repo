I"’	<h3 id="loads">Loads</h3>

<p>Parameters for load can be:</p>
<ul>
  <li>Requests per second to a web server</li>
  <li>ratio of reads/write per seconds to database</li>
  <li>number of simultanous users in a chat room</li>
  <li>hit rate on cache</li>
</ul>

<hr />

<h3 id="database">Database</h3>

<p>The read/write performance of a database heavily depends on the data structure which it uses to store data. We consider that every record is of key/value type and evaluate different types of data structures used by databases.</p>

<h4 id="log-based-append-only">Log based (Append Only)</h4>
<p>Some databases use the append only mechanism. They use log file that is appended on write operation. They have a very good performance for write operation but are very slow for read. For a read operation, the entire log has to be traversed to find the value.</p>

<p>There is an issue of disk space also with log based database as every write to the same key will also increase the size. One possible solution for this problem is <code class="language-plaintext highlighter-rouge">Compaction</code>. There can be a compaction service running that can go through the logs and entries for the same key. The service can then retain the latest change and discard all the previous changes resulting in efficiant usage of disk space.</p>

<h4 id="compaction">Compaction</h4>

<p>The compaction can be performed on a seperate thread without disturbing the read/write operation of database. Each log file can be viewd as a data segement. We never update any exisiting data segement but create new ones.</p>

<ol>
  <li>Existing data segments can be loaded in memory hash map.</li>
  <li>Same keys from different segments can be looked up efficently (using hashmap) and merged.</li>
  <li>We create new segments while combining the keys. Meanwhile the existing read/write operation can be performed using the existing data segment.</li>
  <li>Once the merging is completed, we can switch to the new data segment and perform read/write operations from the new segment.</li>
</ol>

<h4 id="index">Index</h4>
<p>Relational databases maintain indexes on the key. They have high speed reads, but writes are very slow as every write will update the index.</p>

<ul>
  <li>Hash Index: Some database maintain a hash map in memory to store the data. The primary condition of these type of database is to have limited number of keys that can fit into memory.</li>
</ul>

:ET