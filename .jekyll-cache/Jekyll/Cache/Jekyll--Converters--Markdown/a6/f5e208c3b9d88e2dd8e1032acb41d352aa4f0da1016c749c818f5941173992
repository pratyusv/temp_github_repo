I"W!<p>When an object is created from another object, the compiler performs shallow copy. The copy constructor provides a mechanims to perform deep copy.</p>

<ul>
  <li>
    <p><strong>Shallow Copy</strong>
  It is also called as field-by-field copy. In shallow copy the field values are copied as it is. Therefore if an object is pointing to a memory address to heap, the same address is copied. Therefore the source and destination object point to the same heap memory. If one of the object is modified then the effect is reflected on the other object too.</p>
  </li>
  <li>
    <p><strong>Deep Copy</strong>
  The references in the object are derefernced and thier values are copied to a seperate memory location.</p>
  </li>
</ul>

<h4 id="copy-constructor-is-called-when">Copy constructor is called when</h4>
<ul>
  <li>a new object is created from an existing object.</li>
  <li>an object of the class is returned by value.</li>
  <li>an object of the class is passed (to a function) by value as an argument.</li>
  <li>the compiler generates a temporary object</li>
</ul>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Object</span> <span class="n">ob1</span><span class="p">;</span>

<span class="n">Object</span> <span class="n">ob2</span><span class="p">(</span><span class="n">ob1</span><span class="p">)</span> <span class="c1">// copy constructor called.</span>

<span class="n">Object</span> <span class="n">ob2</span> <span class="o">=</span> <span class="n">ob1</span> <span class="c1">// copy constructor called.</span></code></pre></figure>

<p>Example:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">class</span> <span class="nc">Test</span> <span class="p">{</span>
    

    <span class="nl">public:</span>
    
    <span class="n">Test</span><span class="p">(</span><span class="k">const</span> <span class="n">Test</span><span class="o">&amp;</span> <span class="n">ob</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">size</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
        <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span> <span class="p">[</span><span class="n">size</span><span class="p">];</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ob</span><span class="p">.</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="n">curr</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kt">void</span> <span class="n">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">arr</span><span class="p">[</span><span class="n">curr</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
        <span class="n">curr</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">void</span> <span class="n">print</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Size: Address "</span><span class="o">&lt;&lt;&amp;</span><span class="n">size</span><span class="o">&lt;&lt;</span><span class="s">" Value: "</span><span class="o">&lt;&lt;</span><span class="n">size</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Curr: Address "</span><span class="o">&lt;&lt;&amp;</span><span class="n">curr</span><span class="o">&lt;&lt;</span><span class="s">" Value: "</span><span class="o">&lt;&lt;</span><span class="n">curr</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
        
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">arr</span> <span class="o">+</span> <span class="n">i</span><span class="o">&lt;&lt;</span><span class="s">" : "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="p">(</span><span class="n">arr</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="n">Test</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">)</span> <span class="o">:</span><span class="n">size</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="n">curr</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span> <span class="p">[</span><span class="n">s</span><span class="p">];</span> <span class="p">}</span>
        
    
    <span class="nl">private:</span>
        <span class="kt">int</span> <span class="o">*</span><span class="n">arr</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">curr</span><span class="p">;</span>
<span class="p">};</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Test</span> <span class="n">t1</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    
    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">t1</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="n">t1</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    
    <span class="n">Test</span> <span class="n">t2</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    <span class="n">t2</span> <span class="o">=</span> <span class="n">t1</span><span class="p">;</span>
    <span class="n">t2</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    
    <span class="n">Test</span> <span class="n">t3</span><span class="p">(</span><span class="n">t1</span><span class="p">);</span>
    <span class="n">t3</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    
<span class="p">}</span></code></pre></figure>
:ET